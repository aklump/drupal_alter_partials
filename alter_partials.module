<?php
/**
 * @file
 * Base file for the alter_partials module.
 *
 * @defgroup alter_partials Alter Partials
 * @{
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Provide a generic alter partials path for anything.
 *
 * This can be used for custom page callbacks.
 *
 * @param  array  &$build The build array that will be sent to the partial.
 * @param  array $vars Variables that will sent to the partial as their
 *                          key name.
 * @param string $type Usually the implementing module's name
 * @param string $category The second item in the filename construct, optional
 *                          but recommended.  It's one of many of $type.
 * @param  string $version The optional third item in the filename construct.
 *                          Should represent a version of category.
 *
 * @code
 *   alter_partials_custom($build, $vars, 'my_module', 'page', 'about_us')
 * @endcode
 *
 * The above will look for files in this order by these names:
 *   my-module--page--about-us.inc
 *   my-module--about-us.inc
 *   my-module--page.inc
 *   my-module.inc
 */
function alter_partials_custom(&$build, $vars, $type, $category = '', $version = '') {
  $build['#alter_partials_type'] = $type;
  $build['#alter_partials_category'] = $category;
  $build['#alter_partials_version'] = $version;
  $build['#alter_partials_vars'] = $vars;
  $service = \Drupal::service('alter_partials');
  $stack = $service->getStack($build);

  if ($partials = $service->getPartials($stack)) {
    foreach ($partials as $partial) {
      $extract_vars = $vars;
      $service->addGlobalVars($extract_vars, $build);
      extract($extract_vars);
      unset($extract_vars);
      include $partial;
    }
  }
}

/**
 * Implements hook_views_prerender_().
 */
function alter_partials_preprocess_views_view(&$vars) {
  $view = $vars['view'];
  $data = $view->result;
  foreach ($data as &$result) {
    $result = [] + (array) $result;
  }
  $original = [
    '#alter_partials_type' => 'view',
    '#alter_partials_category' => $view->id(),
    '#alter_partials_version' => $view->current_display,
    0 => ['#markup' => $vars['rows']],
  ];
  $build = $original;
  $service = \Drupal::service('alter_partials');
  $stack = $service->getStack($build);
  if ($partials = $service->getPartials($stack)) {
    foreach ($partials as $partial) {
      $extract_vars = [];
      $service->addGlobalVars($extract_vars, $build);
      $service->addViewVars($extract_vars, $view);
      extract($extract_vars);
      unset($extract_vars);
      include $partial;
    }
  }
  if ($build !== $original) {
    $vars['rows'] = $build;
  }
}

/**
 * Implements hook_page_view_alter().
 */
function alter_partials_page_alter(&$build) {
  $stack = [];
  $service = \Drupal::service('alter_partials');
  if (empty($build['content']['system_main']['nodes'])) {
    $stack = $service->getPathStack();
  }

  if ($partials = $service->getPartials($stack)) {
    foreach ($partials as $partial) {
      // Prepare vars for use by the file.
      $extract_vars = [];
      $service->addGlobalVars($extract_vars, $build);
      if (isset($build['#node'])) {
        $service
          ->addNodeVars($extract_vars, $build['#node']);
      }
      extract($extract_vars);
      unset($extract_vars);
      include $partial;
    }
  }
}

function alter_partials_block_view_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
  $service = \Drupal::service('alter_partials');
  $build['#entity_type'] = 'block';
  $stack = $service->getStack($build);
  if ($partials = $service->getPartials($stack)) {
    foreach ($partials as $partial) {
      // Prepare vars for use by the file.
      $extract_vars = [];
      $service->addGlobalVars($extract_vars, $build);
      if (isset($build['#block'])) {
        $service->addBlockVars($extract_vars, $build['#block'], $build);
      }
      extract($extract_vars);
      unset($extract_vars);
      include $partial;
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function alter_partials_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  $service = \Drupal::service('alter_partials');
  $build['#entity_type'] = $entity->getEntityType()->id();
  $stack = $service->getStack($build);
  if ($partials = $service->getPartials($stack)) {
    foreach ($partials as $partial) {
      // Prepare vars for use by the file.
      $extract_vars = [];
      $service->addGlobalVars($extract_vars, $build);
      if (isset($build['#node'])) {
        $service->addNodeVars($extract_vars, $build['#node']);
      }
      extract($extract_vars);
      unset($extract_vars);
      include $partial;
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 *
 * Creates an extra field that can be used in the manage display section
 * to indicate to CM's that the display mode is not configured via the UI.
 */
function alter_partials_field_extra_fields() {
  $info = \Drupal::entityManager()->getDefinitions();
  $entities = [];
  foreach ($info as $entity_type => $i) {
    $entities['#available'][$entity_type] = array_keys($i['bundles']);
  }

  // Auto-discover based on discovered partials files.
  $discovered = \Drupal::service('alter_partials')->getAllAvailablePartials();

  // TODO Do we need this next?
  \Drupal::service('alter_partials')->getPartials([]);
  foreach (array_keys($discovered) as $name) {
    list($entity, $type) = explode('--', $name . '--');
    $entity = str_replace('-', '_', $entity);
    $type = str_replace('-', '_', $type);
    $entities[$entity][$type] = $type;
  }

  foreach (\Drupal\Core\Render\Element::children($entities) as $entity_type) {
    $entities[$entity_type] = array_keys($entities[$entity_type]);
  }
  \Drupal::moduleHandler()->alter('alter_partials_entities_in_code', $entities);

  foreach (\Drupal\Core\Render\Element::children($entities) as $entity_type) {
    foreach ($entities[$entity_type] as $bundle_type) {
      $extra[$entity_type][$bundle_type]['display'] = [
        'alter_partials_version_in_code' => [
          'label' => t('Display managed in code'),
          'weight' => 0,
        ],
      ];
    }
  }

  return $extra;
}

/**
 * Implements hook_alter_partials_info().
 *
 * Return the current theme's alter_partials directory if it exists.
 */
function alter_partials_alter_partials_info() {
  if (($theme = \Drupal::service('theme.manager')->getActiveTheme())
    && ($theme_folder = \Drupal::root() . '/' . drupal_get_path('theme', $theme->getName()) . '/alter_partials')
    && is_dir($theme_folder)) {
    return [
      'directory' => [
        'theme' => [
          $theme_folder,
        ],
      ],
    ];
  }
  return [];
}
