<?php
/**
 * @file
 * Base file for the alter_partials module.
 *
 * @defgroup alter_partials Alter Partials
 * @{
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Provide a generic alter partials path for anything.
 *
 * This can be used for custom page callbacks.
 *
 * @param array  &$build The build array that will be sent to the partial.
 * @param array $vars Variables that will sent to the partial as their
 *                          key name.
 * @param string $type Usually the implementing module's name
 * @param string $category The second item in the filename construct, optional
 *                          but recommended.  It's one of many of $type.
 * @param string $version The optional third item in the filename construct.
 *                          Should represent a version of category.
 *
 * @code
 *   alter_partials_custom($build, $vars, 'my_module', 'page', 'about_us')
 * @endcode
 *
 * The above will look for files in this order by these names:
 *   my-module--page--about-us.inc
 *   my-module--about-us.inc
 *   my-module--page.inc
 *   my-module.inc
 */
function alter_partials_custom(&$build, $vars, $type, $category = '', $version = '') {
  $build['#alter_partials_type'] = $type;
  $build['#alter_partials_category'] = $category;
  $build['#alter_partials_version'] = $version;
  $build['#alter_partials_vars'] = $vars;
  $service = \Drupal::service('alter_partials');
  $stack = $service->getStack($build);

  if ($partials = $service->getPartials($stack)) {
    foreach ($partials as $partial) {
      $extract_vars = $vars;
      $service->addGlobalVars($extract_vars, $build);
      extract($extract_vars);
      unset($extract_vars);
      include $partial;
    }
  }
}

/**
 * Implements hook_views_prerender_().
 */
function alter_partials_preprocess_views_view(&$vars) {
  $view = $vars['view'];
  $data = $view->result;
  foreach ($data as &$result) {
    $result = [] + (array) $result;
  }
  $original = [
    '#alter_partials_type' => 'view',
    '#alter_partials_category' => $view->id(),
    '#alter_partials_version' => $view->current_display,
    0 => ['#markup' => $vars['rows']],
  ];
  $build = $original;
  $service = \Drupal::service('alter_partials');
  $stack = $service->getStack($build);
  if ($partials = $service->getPartials($stack)) {
    foreach ($partials as $partial) {
      $extract_vars = [];
      $service->addGlobalVars($extract_vars, $build);
      $service->addViewVars($extract_vars, $view);
      extract($extract_vars);
      unset($extract_vars);
      include $partial;
    }
  }
  if ($build !== $original) {
    $vars['rows'] = $build;
  }
}

/**
 * Implements hook_page_view_alter().
 */
function alter_partials_page_alter(&$build) {
  $stack = [];
  $service = \Drupal::service('alter_partials');
  if (empty($build['content']['system_main']['nodes'])) {
    $stack = $service->getPathStack();
  }

  if ($partials = $service->getPartials($stack)) {
    foreach ($partials as $partial) {
      // Prepare vars for use by the file.
      $extract_vars = [];
      $service->addGlobalVars($extract_vars, $build);
      if (isset($build['#node'])) {
        $service
          ->addNodeVars($extract_vars, $build['#node']);
      }
      extract($extract_vars);
      unset($extract_vars);
      include $partial;
    }
  }
}

function alter_partials_block_view_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
  $service = \Drupal::service('alter_partials');
  $build['#entity_type'] = 'block';
  $stack = $service->getStack($build);
  if ($partials = $service->getPartials($stack)) {
    foreach ($partials as $partial) {
      // Prepare vars for use by the file.
      $extract_vars = [];
      $service->addGlobalVars($extract_vars, $build);
      if (isset($build['#block'])) {
        $service->addBlockVars($extract_vars, $build['#block'], $build);
      }
      extract($extract_vars);
      unset($extract_vars);
      include $partial;
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function alter_partials_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  $service = \Drupal::service('alter_partials');
  $build['#entity_type'] = $entity->getEntityTypeId();
  $stack = $service->getStack($build);
  if ($partials = $service->getPartials($stack)) {
    foreach ($partials as $partial) {
      // Prepare vars for use by the file.
      $extract_vars = [];
      $service->addGlobalVars($extract_vars, $build);
      if (isset($build['#node'])) {
        $service->addNodeVars($extract_vars, $build['#node']);
      }
      extract($extract_vars);
      unset($extract_vars);
      include $partial;
    }
  }
}

/**
 * Implements hook_entity_extra_field_info().
 *
 * Creates an extra field that can be used in the manage display section
 * to indicate to content managers that the display mode is not configured via
 * the UI.
 */
function alter_partials_entity_extra_field_info() {
  $service = \Drupal::service('alter_partials');
  $all_partials = array_map(function ($name) use ($service) {
    return $service->getEntityTypeAndBundleByPartialFilename($name);
  }, $service->getAllAvailablePartials());
  $entities_with_partials = array_map(function ($parts) {
    return $parts[0];
  }, $all_partials);


  $bundle_info_service = \Drupal::service('entity_type.bundle.info');
  $entity_info = \Drupal::entityManager()->getDefinitions();
  $available = [];
  foreach ($entity_info as $entity_type => $info) {
    foreach ($bundle_info_service->getBundleInfo($entity_type) as $bundle => $bundle_info) {
      $available[$entity_type][$bundle] = $bundle;
    }
  }

  $entities = [];
  $entities['#available'] = array_map('array_values', $available);

  $entity_info = array_filter($entity_info, function ($key) use ($entities_with_partials) {
    return in_array($key, $entities_with_partials);
  }, ARRAY_FILTER_USE_KEY);

  foreach ($entity_info as $entity_type => $info) {
    foreach ($bundle_info_service->getBundleInfo($entity_type) as $bundle => $bundle_info) {
      $is_in_code = array_filter($all_partials, function ($partial) use ($entity_type, $bundle) {
        return $partial == [
            $entity_type,
            $bundle,
          ] || empty($partial[1]) && $partial[0] === $entity_type;
      });
      if ($is_in_code) {
        if (empty($bundle)) {
          $entities[$entity_type] = $available[$entity_type];
        }
        else {
          $entities[$entity_type][] = $bundle;
        }
      }
    }
  };

  \Drupal::moduleHandler()->alter('alter_partials_entities_in_code', $entities);

  $extra = [];
  foreach (Element::children($entities) as $entity_type) {
    foreach ($entities[$entity_type] as $bundle) {
      $extra[$entity_type][$bundle]['display'] = [
        'alter_partials_version_in_code' => [
          'label' => t('Display managed in code'),
          'weight' => 0,
        ],
      ];
    }
  }

  return $extra;
}

/**
 * Implements hook_alter_partials_info().
 *
 * Automatically register the default theme as providing alter partials based
 * on the existence of the directory.
 */
function alter_partials_alter_partials_info() {
  $config = \Drupal::service('config.factory')->get('system.theme');
  if (($theme_folder = \Drupal::root() . '/' . drupal_get_path('theme', $config->get('default')) . '/alter_partials')
    && is_dir($theme_folder)) {
    return [
      'directory' => [
        'theme' => [
          $theme_folder,
        ],
      ],
    ];
  }

  return [];
}

function alter_partials_webform_submission_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#after_build'][] = '_alter_partials_webform_submission_form_after_build';
}

function _alter_partials_webform_submission_form_after_build(array $form, FormStateInterface $form_state) {
  $service = \Drupal::service('alter_partials');
  $build['#entity'] = \Drupal\webform\Entity\Webform::load($form['#webform_id']);
  $build['#entity_type'] = $build['#entity']->getEntityTypeId();
  $stack = $service->getStack($build);

  // Just pass the form through if no alters are found.
  if (!($partials = $service->getPartials($stack))) {
    return $form;
  }

  // Otherwise we will create a new build array, moving the form as the child.
  $build['#form_state'] = $form_state;
  $build['webform'] = $form;
  foreach ($partials as $partial) {
    // Prepare vars for use by the file.
    $extract_vars = [];
    $service->addGlobalVars($extract_vars, $build);
    extract($extract_vars);
    unset($extract_vars);
    include $partial;
  }


  return $build;
}
