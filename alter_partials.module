<?php
/**
 * @file
 * Base file for the alter_partials module.
 *
 * @defgroup alter_partials Alter Partials
 * @{
 */

/**
 * @var ALTER_PARTIALS_CACHE_ENABLED
 *
 * Default value for variable.
 */
define('ALTER_PARTIALS_CACHE_ENABLED', TRUE);


/**
 * Provide a generic alter partials path for anything.
 *
 * This can be used for custom page callbacks.
 *
 * @param  array  &$build   The build array that will be sent to the partial.
 * @param  array  $vars     Variables that will sent to the partial as their
 *                          key name.
 * @param string  $type     Usually the implementing module's name
 * @param string  $category The second item in the filename construct, optional
 *                          but recommended.  It's one of many of $type.
 * @param  string $version  The optional third item in the filename construct.
 *                          Should represent a version of category.
 *
 * @code
 *   alter_partials_custom($build, $vars, 'my_module', 'page', 'about_us')
 * @endcode
 *
 * The above will look for files in this order by these names:
 *   my-module--page--about-us.inc
 *   my-module--about-us.inc
 *   my-module--page.inc
 *   my-module.inc
 */
function alter_partials_custom(&$build, $vars, $type, $category = '', $version = '') {
  module_load_include('inc', 'alter_partials', 'includes/alter_partials.partials');

  $build['#alter_partials_type'] = $type;
  $build['#alter_partials_category'] = $category;
  $build['#alter_partials_version'] = $version;
  $build['#alter_partials_vars'] = $vars;
  $stack = _alter_partials_entity_stack($build);

  if ($partials = _alter_partials_get_partials($stack)) {
    foreach ($partials as $partial) {
      $extract_vars = $vars;
      _alter_partials_global_vars($extract_vars, $build);
      extract($extract_vars);
      unset($extract_vars);
      include $partial;
    }
  }
}

/**
 * Implements hook_views_prerender_().
 */
function alter_partials_preprocess_views_view(&$vars) {
  module_load_include('inc', 'alter_partials', 'includes/alter_partials.partials');

  $view = $vars['view'];
  $data = $view->result;
  foreach ($data as &$result) {
    $result = array() + (array) $result;
  }
  $original = array(
    '#alter_partials_type' => 'view',
    '#alter_partials_category' => $view->name,
    '#alter_partials_version' => $view->current_display,
    0 => array('#markup' => $vars['rows']),
  );
  $build = $original;

  $stack = _alter_partials_entity_stack($build);
  if ($partials = _alter_partials_get_partials($stack)) {
    foreach ($partials as $partial) {
      $extract_vars = array();
      _alter_partials_global_vars($extract_vars, $build);
      _alter_partials_view_vars($extract_vars, $view);
      extract($extract_vars);
      unset($extract_vars);
      include $partial;
    }
  }
  if ($build !== $original) {
    $vars['rows'] = drupal_render($build);
  }
}

/**
 * Implements hook_page_view_alter().
 */
function alter_partials_page_alter(&$build) {
  module_load_include('inc', 'alter_partials', 'includes/alter_partials.partials');
  $stack = array();
  if (empty($build['content']['system_main']['nodes'])) {
    $stack = _alter_partials_path_stack();
  }

  if ($partials = _alter_partials_get_partials($stack)) {
    foreach ($partials as $partial) {
      // Prepare vars for use by the file.
      $extract_vars = array();
      _alter_partials_global_vars($extract_vars, $build);
      if (isset($build['#node'])) {
        _alter_partials_node_vars($extract_vars, $build['#node']);
      }
      extract($extract_vars);
      unset($extract_vars);
      include $partial;
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function alter_partials_entity_view_alter(&$build, $entity_type) {
  module_load_include('inc', 'alter_partials', 'includes/alter_partials.partials');
  $stack = _alter_partials_entity_stack($build);
  if ($partials = _alter_partials_get_partials($stack)) {
    foreach ($partials as $partial) {
      // Prepare vars for use by the file.
      $extract_vars = array();
      _alter_partials_global_vars($extract_vars, $build);
      if (isset($build['#node'])) {
        _alter_partials_node_vars($extract_vars, $build['#node']);
      }
      extract($extract_vars);
      unset($extract_vars);
      include $partial;
    }
  }
}

/**
 * Implements hook_ds_pre_render_alter().
 */
function alter_partials_ds_pre_render_alter(&$build, $context, &$vars) {
  module_load_include('inc', 'alter_partials', 'includes/alter_partials.partials');
  list($id, $vid, $bundle) = entity_extract_ids($context['entity_type'], $context['entity']);

  $stack = _alter_partials_filename_stack($context['entity_type'], $bundle, $context['view_mode'], $id, 'ds');
  if ($partials = _alter_partials_get_partials($stack)) {
    foreach ($partials as $partial) {
      // Prepare vars for use by the file.
      $extract_vars = array();
      _alter_partials_global_vars($extract_vars, $build);
      if ($context['entity_type'] === 'node') {
        _alter_partials_node_vars($extract_vars, $context['entity']);
      }
      extract($extract_vars);
      unset($extract_vars);
      include $partial;
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 *
 * Creates an extra field that can be used in the manage display section
 * to indicate to CM's that the display mode is not configured via the UI.
 */
function alter_partials_field_extra_fields() {
  $info = entity_get_info();
  $entities = array();
  foreach ($info as $entity_type => $i) {
    $entities['#available'][$entity_type] = array_keys($i['bundles']);
  }

  // Autodiscover based on discovered partials files.
  module_load_include('inc', 'alter_partials', 'includes/alter_partials.partials');
  $discovered = array();
  _alter_partials_get_partials([], $discovered);
  foreach (array_keys($discovered) as $name) {
    list($entity, $type) = explode('--', $name . '--');
    $entity = str_replace('-', '_', $entity);
    $type = str_replace('-', '_', $type);
    $entities[$entity][$type] = $type;
  }

  foreach (element_children($entities) as $entity_type) {
    $entities[$entity_type] = array_keys($entities[$entity_type]);
  }
  drupal_alter('alter_partials_entities_in_code', $entities);

  foreach (element_children($entities) as $entity_type) {
    foreach ($entities[$entity_type] as $bundle_type) {
      $extra[$entity_type][$bundle_type]['display'] = array(
        'alter_partials_version_in_code' => array(
          'label' => t('Display managed in code'),
          'weight' => 0,
        ),
      );
    }
  }

  return $extra;
}

/**
 * Render output for a block.
 *
 * This is handled differently from the entity view, because we want any
 * modifications in the partial to replace the entire block rendering bit, so
 * that the block wrapper is not used.  This is consistent with how we do
 * entities.
 *
 * @param array $vars
 *   The variables to send to the template.
 *
 * @return string
 *   The rendered output.
 */
function alter_partials_theme_block($vars) {
  module_load_include('inc', 'alter_partials', 'includes/alter_partials.partials');

  $stack = array_map(function ($item) {
    return str_replace('_', '-', $item);
  }, $vars['theme_hook_suggestions']);

  if ($partials = _alter_partials_get_partials($stack)) {

    $block = $vars['block'];
    $original = [
      '#alter_partials_type' => 'block',
      '#alter_partials_module' => $block->module,
      '#alter_partials_delta' => $block->delta,
      0 => ['#markup' => $vars['content']],
    ];
    $build = $original;

    foreach ($partials as $partial) {
      $extract_vars = [];
      _alter_partials_global_vars($extract_vars, $build);
      _alter_partials_block_vars($extract_vars, $block, $build, $vars);
      extract($extract_vars);
      unset($extract_vars);
      include $partial;
    }

    if ($build !== $original) {
      $output = drupal_render($build);
    }
  }
  else {
    $output = _alter_partials_theme_fallback('block', $vars);
  }

  return $output;
}

/**
 * Implements hook_theme_registry_alter().
 */
function alter_partials_theme_registry_alter(&$themes) {
  $themes['block']['function'] = 'alter_partials_theme_block';
  $themes['block']['type'] = 'module';
  $themes['block']['alter_partials'] = ['template' => $themes['block']['template']];
  unset($themes['block']['template']);
}
